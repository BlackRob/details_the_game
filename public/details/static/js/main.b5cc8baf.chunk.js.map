{"version":3,"sources":["components/header_pages/Ellipsis.jsx","components/header_pages/Question.jsx","components/header_pages/Exclamation.jsx","components/Header.jsx","components/SentenceBlocks.jsx","components/Cards.jsx","components/Sharing.jsx","components/Buttons.jsx","nonComponentFunctions/preInsertProcessing.js","App.js","nonComponentFunctions/parseServerResponse.js","serviceWorker.js","index.js"],"names":["EllipsisPage","showVal","setShow","showHide","className","onClick","App","useState","show","QuestionPage","ExclamationPage","href","alt","Ellipsis","Question","Exclamation","sentence","placing","insert","map","element","index","x","activeClass","block_border","key","id","type","word","e","preventDefault","Block","DrawClearButton","updateState","active","wR","clearWR","toggleWorking","length","forEach","DrawWorkingRowContent","removeFromWR","cards","undoable","undoSecondsLeft","winner","totalCardCount","sentenceUpdateCount","content","rando","randomInterjection","find","y","z","coolInterjections","Math","floor","random","DrawWorkingCard","wordType","cardId","DrawType","DrawRemoveButton","DrawInputDiv","defaultValue","size","max","name","onKeyUp","target","value","DrawPlaceButton","setPlacing","somethingWritten","cardsInWR","filter","working","DrawCardButton","addToWR","numType","top","DrawCards","onEdit","SharingPopUp","setShowSharing","workingCards","canvasRef","createRef","canvasDataURL","useEffect","drawCanvas","ref","width","height","htmlFor","rows","EmailShareButton","children","EmailIcon","round","url","FacebookShareButton","FacebookIcon","TelegramShareButton","TelegramIcon","RedditShareButton","RedditIcon","TwitterShareButton","TwitterIcon","WhatsappShareButton","WhatsappIcon","sentence_height","ctx","current","getContext","font48","top_bottom_sentence_margin","font","cw","rb","printArray","prePrintSentence","numRows","row","working_height","fillStyle","fillRect","fillText","gamesWidth","measureText","grumblyWidth","printSentence","printWorkingRow","lineWidth","printCardRow","toDataURL","rm","rh","wpr","margin","color","typeColor","wordX","wordY","ww","currentRow","currentRowWidth","i","isPunc","currentRowOffset","blo","rowWordsWidth","push","reduce","a","b","indent","extraLeftMargin","working_row_height","card_row_height","w","gap","h","r1y","r2y","textAlign","fill","cardsByType","kard","strokeStyle","roundedRectangle","r","beginPath","moveTo","arcTo","lineTo","stroke","closePath","punc","showSharing","UndoButton","action","optionalClass","NewGameButton","NewCardButton","enabledState","ShareButton","props","newGame","undo","newCard","getCardById","console","log","puncStartCheck","werd","newWerd","slice","trim","puncEndCheck","end","checkForArticle","test","getArticle","removeArticle","helloworld","sentenceId","uuid","v4","Game","state","lastCards","updateSentence","bind","editCard","setLastCards","setUndoability","longerSentence","this","setState","pop","axios","get","headers","then","response","data","newSentence","someJsonSentence","ngs","sampleSentence","parseServerResponse","newRandomCard","catch","err","concat","indexOfCard","findIndex","updatedCards","cardIndex","anythingToPlace","maxCardId","toBeInserted","newCardId","thisCard","punctoo","splitWerd","split","subWerd","preInsertProcessing","newSentenceHead","newSentenceTail","interval","setInterval","clearInterval","card","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b5cc8baf.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport \"./header_pages.css\"\n\n\n// Clicking on the span opens an informative popup\nconst App = () => {\n  const [show, setShow] = useState(false);\n  return <div className=\"header_punctuation \">\n    <button onClick={() => { setShow(true) }}>...</button>\n    <EllipsisPage showVal={show} setShow={() => { setShow(false) }} />\n  </div>\n};\n\nconst EllipsisPage = ({ showVal, setShow }) => {\n  let showHide = \"hidden\";\n  if (showVal) {\n    showHide = \"z2\";\n  }\n\n  return <div className={showHide}>\n    <div className=\"z2_body\">\n      <div className=\"z2_title\">\n        Details about \"details\"\n      <span className=\"z2_hide\" onClick={setShow}>x</span>\n      </div>\n      <p><strong>What is this?</strong> It's a game to practice English grammar.</p>\n      <p><strong>How do you play?</strong> You start with a simple sentence, then make it longer by adding details.</p>\n      <p><strong>What do you mean by \"details\"?</strong> I mean details! If I have a sentence, \"Chocolate is delicious\", I can add a <i>detail</i> like the adjective \"dark\", and now I have a longer sentence, \"Dark chocolate is delicious\".</p>\n    </div>\n  </div>\n}\n\n\nexport default App;\n","import React, { useState } from 'react';\nimport \"./header_pages.css\"\n\n\n// Clicking on the span opens an informative popup\nconst App = () => {\n  const [show, setShow] = useState(false);\n  return <div className=\"header_punctuation \">\n    <button onClick={() => { setShow(true) }}>?</button>\n    <QuestionPage showVal={show} setShow={() => { setShow(false) }} />\n  </div>\n};\n\nconst QuestionPage = ({ showVal, setShow }) => {\n  let showHide = \"hidden\";\n  if (showVal) {\n    showHide = \"z2\";\n  }\n\n  return <div className={showHide}>\n    <div className=\"z2_body\">\n      <div className=\"z2_title\">\n        FAQ\n      <span className=\"z2_hide\" onClick={setShow}>x</span>\n      </div>\n      <p><strong>What is this?</strong> <br />It's a game to practice English grammar.</p>\n      <p><strong>How do you play?</strong> <br />You start with a simple sentence, then make it longer by adding details.</p>\n      <p><strong>What do you mean by \"details\"?</strong> <br />I mean details! If I have a sentence, \"Chocolate is delicious\", I can add a <i>detail</i> like the adjective \"dark\", and now I have a longer sentence, \"Dark chocolate is delicious\".</p>\n    </div>\n  </div>\n}\n\n\nexport default App;\n","import React, { useState } from 'react';\nimport \"./header_pages.css\"\n\n\n// Clicking on the span opens an informative popup\nconst App = () => {\n  const [show, setShow] = useState(false);\n  return <div className=\"header_punctuation \">\n    <button onClick={() => { setShow(true) }}>!</button>\n    <ExclamationPage showVal={show} setShow={() => { setShow(false) }} />\n  </div>\n};\n\nconst ExclamationPage = ({ showVal, setShow }) => {\n  let showHide = \"hidden\";\n  if (showVal) {\n    showHide = \"z2\";\n  }\n\n  return <div className={showHide}>\n    <div className=\"z2_body\">\n      <div className=\"z2_title\">\n        Love it? Share it!\n      <span className=\"z2_hide\" onClick={setShow}>x</span>\n      </div>\n      <p><strong>What is this?</strong> It's a game to practice English grammar.</p>\n      <p><strong>How do you play?</strong> You start with a simple sentence, then make it longer by adding details.</p>\n      <p><strong>What do you mean by \"details\"?</strong> I mean details! If I have a sentence, \"Chocolate is delicious\", I can add a <i>detail</i> like the adjective \"dark\", and now I have a longer sentence, \"Dark chocolate is delicious\".</p>\n      <p><strong>What is this?</strong> It's a game to practice English grammar.</p>\n      <p><strong>How do you play?</strong> You start with a simple sentence, then make it longer by adding details.</p>\n      <p><strong>What do you mean by \"details\"?</strong> I mean details! If I have a sentence, \"Chocolate is delicious\", I can add a <i>detail</i> like the adjective \"dark\", and now I have a longer sentence, \"Dark chocolate is delicious\".</p>\n      <p><strong>What is this?</strong> It's a game to practice English grammar.</p>\n      <p><strong>How do you play?</strong> You start with a simple sentence, then make it longer by adding details.</p>\n      <p><strong>What do you mean by \"details\"?</strong> I mean details! If I have a sentence, \"Chocolate is delicious\", I can add a <i>detail</i> like the adjective \"dark\", and now I have a longer sentence, \"Dark chocolate is delicious\".</p>\n      <p><strong>What is this?</strong> It's a game to practice English grammar.</p>\n      <p><strong>How do you play?</strong> You start with a simple sentence, then make it longer by adding details.</p>\n      <p><strong>What do you mean by \"details\"?</strong> I mean details! If I have a sentence, \"Chocolate is delicious\", I can add a <i>detail</i> like the adjective \"dark\", and now I have a longer sentence, \"Dark chocolate is delicious\".</p>\n    </div>\n  </div>\n}\n\n\nexport default App;\n","import React from 'react';\nimport './Header.css';\nimport Ellipsis from './header_pages/Ellipsis';\nimport Question from './header_pages/Question';\nimport Exclamation from './header_pages/Exclamation';\n\n// our header, which has nothing to do with gameplay\nexport default ({ ...props }) => (\n  <header className=\"App_header\">\n    <div className=\"Header_logo\" ><a href=\"http://workingclasshouses.com\" alt=\"logo\">details</a></div>\n    <Ellipsis />\n    <Question />\n    <Exclamation />\n  </header>\n);","import React from 'react';\nimport './SentenceBlocks.css';\n\n\nconst Block = (x, index, placing, insert) => {\n  let activeClass = \"placing_button hidden\";\n  let block_border = \"\";\n  if (placing) {\n    activeClass = \"placing_button\";\n    block_border = \"block_border\";\n  }\n  return <div key={x.id} className={`block ${block_border}`}>\n    <div className={x.type}>{x.word}</div>\n    <button className={`${activeClass}`} onClick={(e) => {\n      e.preventDefault();\n      insert(index);\n    }}>{index}</button>\n  </div>\n}\n\nexport default ({ sentence, placing, insert }) => (\n  <div className=\"active_sentence_slot\">\n    <div className=\"active_sentence_top_effect\"></div>\n    <div className=\"active_sentence_content\">\n      <div className=\"active_sentence\">\n        {sentence.map((element, index) => {\n          return Block(element, index, placing, insert);\n        })}\n      </div>\n    </div>\n    <div className=\"active_sentence_bottom_effect\"></div>\n  </div>\n);\n","import React from 'react';\nimport './Cards.css';\n\n/////////////////////// clear button \nconst DrawClearButton = ({ updateState, active, wR, clearWR, toggleWorking }) => {\n  let activeClass = \"clear_button\";\n  if (!active || wR.length === 0) {\n    activeClass = activeClass + \" disabled\";\n  };\n  return <button className={activeClass}\n    onClick={(e) => {\n      e.preventDefault();\n      // for each card in the working row, erase its content\n      // and turn it's working state off\n      wR.forEach(x => { updateState(x, \"\"); toggleWorking(x) });\n      // then clear the working row\n      clearWR();\n    }} >\n    clear\n  </button>\n}\n\n/////////////////////// working row content\nconst DrawWorkingRowContent = ({ wR, removeFromWR, updateState, cards, toggleWorking, undoable, undoSecondsLeft, winner, totalCardCount, sentenceUpdateCount }) => {\n  let content = \"\";\n  let rando = randomInterjection();\n\n  if (undoable) {\n    content = <div className=\"working_row_message\">Seconds left to change your mind: {undoSecondsLeft}</div>\n  } else if (winner) {\n    content = <div className=\"working_row_message\">{rando}! &nbsp; You won! &nbsp; &nbsp; Cards inserted: {totalCardCount} &nbsp; &nbsp; Moves needed: {sentenceUpdateCount}</div>\n  }\n\n  if (wR.length !== 0) {\n    const workingCards = wR.map(x => cards.find(y => y.id === x));\n    content =\n      workingCards.map(z => <DrawWorkingCard element={z} key={z.id} updateState={updateState} removeFromWR={removeFromWR} toggleWorking={toggleWorking} />)\n  };\n\n  return <div className=\"working_row_content\">\n    {content}\n  </div>\n}\n\nconst randomInterjection = (() => {\n  const coolInterjections = [\"Yikes\", \"Wow\", \"Hey now\", \"Zounds\", \"Kapow\", \"Whammy\", \"Whaaaaat\", \"Whoopie\", \"Zoinks\", \"Bingo\"];\n  return coolInterjections[Math.floor(Math.random() * coolInterjections.length)];\n})\n\nconst DrawWorkingCard = ({ element, updateState, removeFromWR, toggleWorking }) => {\n  return <div className={element.type + \" card\"}>\n    <DrawType wordType={element.type} />\n    <DrawRemoveButton updateState={updateState} cardId={element.id} removeFromWR={removeFromWR} toggleWorking={toggleWorking} />\n    <DrawInputDiv word={element.word} cardId={element.id} updateState={updateState} />\n  </div>\n}\n\nconst DrawType = ({ wordType }) => {\n  return <div className=\"typename\">{wordType}</div>\n}\n\nconst DrawRemoveButton = ({ updateState, cardId, removeFromWR, toggleWorking }) => {\n  return <button\n    onClick={(e) => {\n      e.preventDefault();\n      updateState(cardId, \"\");\n      toggleWorking(cardId);\n      removeFromWR(cardId);\n    }}>x\n  </button>\n}\n\nconst DrawInputDiv = ({ word, cardId, updateState }) => {\n  return <div className=\"input_div\">\n    <input type=\"text\" defaultValue={word} size={Math.max(4, word.length)}\n      name={cardId}\n      onKeyUp={(e) => { updateState(cardId, e.target.value); }}\n    />\n  </div>\n}\n\n/////////////////////// place button\nconst DrawPlaceButton = ({ cards, setPlacing, placing, undoable }) => {\n  // assumption is most of the time nothing suitable for inserting \n  // into the working sentence is in working row, so dafault to disabled\n  let activeClass = \"place_button disabled\";\n  // if all the working row cards have something written on them, and we're not\n  // currently waiting in the \"undo\" grace period, enable the button\n  let somethingWritten = false;\n  let cardsInWR = cards.filter(x => x.working);\n  if (cardsInWR.length > 0) {\n    somethingWritten = true;\n    cardsInWR.forEach(x => { if (x.word.length === 0) { somethingWritten = false } });\n  }\n  if (somethingWritten && !undoable) {\n    activeClass = \"place_button\";\n  };\n\n  return <button className={activeClass} onClick={() => { setPlacing(!placing) }} >place</button>\n}\n\n/////////////////////// available card buttons\nconst DrawCardButton = ({ type, addToWR, cards, toggleWorking }) => {\n  let activeClass = \"disabled\";\n  let numType = (cards.filter(element => (element.type === type && !element.working)));\n  if (numType.length > 0) {\n    activeClass = type;\n  }\n\n  return <button className={activeClass}\n    onClick={(e) => {\n      e.preventDefault();\n      let top = numType[numType.length - 1];\n      toggleWorking(top.id)\n      addToWR(top.id);\n    }}>\n    {type}<br /> {numType.length}\n  </button>\n}\n\n\n/////////////////////// the whole shebang\nconst DrawCards = ({ cards, onEdit, active, wR, toggleWorking, clearWR, addToWR, removeFromWR, setPlacing, placing, undoable, undoSecondsLeft, winner, totalCardCount, sentenceUpdateCount }) => {\n  return <div className=\"card_row\">\n    <div className=\"working_row\">\n      <DrawClearButton updateState={onEdit} active={active} wR={wR} clearWR={clearWR} toggleWorking={toggleWorking} />\n      <div className=\"working_row_slot\">\n        <DrawWorkingRowContent wR={wR} removeFromWR={removeFromWR} updateState={onEdit} cards={cards} toggleWorking={toggleWorking} undoable={undoable} undoSecondsLeft={undoSecondsLeft} winner={winner} totalCardCount={totalCardCount} sentenceUpdateCount={sentenceUpdateCount} />\n      </div>\n      <DrawPlaceButton cards={cards} setPlacing={setPlacing} placing={placing} undoable={undoable} />\n    </div>\n    <div className=\"available_cards\">\n      <DrawCardButton type=\"adj\" wR={wR} addToWR={addToWR} cards={cards} toggleWorking={toggleWorking} />\n      <DrawCardButton type=\"adv\" wR={wR} addToWR={addToWR} cards={cards} toggleWorking={toggleWorking} />\n      <DrawCardButton type=\"conj\" wR={wR} addToWR={addToWR} cards={cards} toggleWorking={toggleWorking} />\n      <DrawCardButton type=\"pron\" wR={wR} addToWR={addToWR} cards={cards} toggleWorking={toggleWorking} />\n      <DrawCardButton type=\"noun\" wR={wR} addToWR={addToWR} cards={cards} toggleWorking={toggleWorking} />\n      <DrawCardButton type=\"verb\" wR={wR} addToWR={addToWR} cards={cards} toggleWorking={toggleWorking} />\n      <DrawCardButton type=\"prep\" wR={wR} addToWR={addToWR} cards={cards} toggleWorking={toggleWorking} />\n      <DrawCardButton type=\"intrj\" wR={wR} addToWR={addToWR} cards={cards} toggleWorking={toggleWorking} />\n    </div>\n  </div>\n}\n\nexport default DrawCards;\n","import React, { useEffect, createRef } from 'react';\nimport {\n  EmailShareButton, EmailIcon,\n  FacebookShareButton, FacebookIcon,\n  TelegramShareButton, TelegramIcon,\n  RedditShareButton, RedditIcon,\n  TwitterShareButton, TwitterIcon,\n  WhatsappShareButton, WhatsappIcon,\n} from \"react-share\";\nimport \"./Sharing.css\";\nimport \"./header_pages/header_pages.css\";\n\n\n// Clicking on the span opens an informative popup\nconst App = ({ sentence, cards, showSharing, setShowSharing, workingCards }) => {\n  if (!showSharing) {\n    return <div className=\"hidden\"></div>\n  } else {\n    return <SharingPopUp sentence={sentence}\n      cards={cards}\n      setShowSharing={setShowSharing} />\n  }\n}\n\nconst SharingPopUp = ({ sentence, cards, setShowSharing, workingCards }) => {\n  const canvasRef = createRef();\n  let canvasDataURL = \"\";\n\n  useEffect(() => {\n    canvasDataURL = drawCanvas({ sentence, cards, canvasRef, workingCards });\n  });\n\n  return <div className=\"z2\">\n    <div className=\"sharing_popup\">\n      <div className=\"z2_title\">\n        Share your sentence!\n      <span className=\"z2_hide\" onClick={() => { setShowSharing(false) }}>x</span>\n      </div>\n      <canvas ref={canvasRef} width={1080} height={566} />\n\n      <label htmlFor=\"my_comment\">Enter your comment</label><br />\n      <textarea id=\"my_comment\"\n        defaultValue=\"I'm playing details (the game)!\"\n        name=\"my_comment\" rows=\"4\" />\n      <div className=\"sharing_button_row\">\n        <EmailShareButton children={<EmailIcon size={32} round={true} />} url={canvasDataURL} />\n        <FacebookShareButton children={<FacebookIcon size={32} round={true} />} url={canvasDataURL} />\n        <TelegramShareButton children={<TelegramIcon size={32} round={true} />} url={canvasDataURL} />\n        <RedditShareButton children={<RedditIcon size={32} round={true} />} url={canvasDataURL} />\n        <TwitterShareButton children={<TwitterIcon size={32} round={true} />} url={canvasDataURL} />\n        <WhatsappShareButton children={<WhatsappIcon size={32} round={true} />} url={canvasDataURL} />\n      </div>\n    </div>\n  </div>\n}\n\n/* this function redraws the current sentence and cards\n  on a canvas, so that it can be shared as an image */\nconst drawCanvas = ({ sentence, cards, canvasRef, workingCards }) => {\n  const ctx = canvasRef.current.getContext(\"2d\");\n  // we need to figure out how tall our image has to be first\n  const min_height = 566;\n  // we have to set and adjust the font several times\n  // and firefox complains about \"multiline support\", so just in case \n  // these lines are looooong\n  const font30 = 'normal normal 30px -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif';\n  const font36 = 'normal normal 36px -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif'; // \"comic sans ms\"\n  const font48 = 'normal normal 48px -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif';\n  // sentence left/right margin\n  const margin = 20;\n  // top banner should always be the same\n  const top_banner_height = 70;\n  // margin at top of sentence should have a minimum value\n  let top_bottom_sentence_margin = 30;\n  // calculated height of sentence\n  let sentence_height = 0;\n  // if working row is empty, we don't show it\n  let working_row_height = 120;\n  // if sentence is complete (no cards left), we don't show card row\n  let card_row_height = 100;\n\n  // I don't know if this is necessary, but I want to use the same font as\n  // the rest of the game is played in\n  ctx.font = font48;\n\n  // when working with text, with this font and size, assuming a lineheight\n  // of 80px with the baseline at 60 looks good \n  // some convenience variables\n  const rm = 30; // \"row margin\" for between rows\n  const rh = 80; // average \"row height\" \n  const blo = 20; // baseline offset\n  const wpr = 15; // word padding right\n  const cw = canvasRef.current.width; // canvas width\n  let rb = top_banner_height; // \"row beginning\" w/ initial value\n\n  // do some pre-printing work, return an augmented array\n  // it's important that the font is set to the correct font now for sizing\n  let printArray = prePrintSentence(sentence, rm, rh, cw, wpr, margin, ctx);\n\n  // calculate how tall sentence block should be\n  let numRows = printArray[printArray.length - 1].row;\n  sentence_height = numRows * rh + rm * (numRows - 1);\n\n  let working_height = top_banner_height + top_bottom_sentence_margin +\n    sentence_height + top_bottom_sentence_margin + working_row_height +\n    margin + card_row_height + margin;\n  // if a short sentence, we don't want our image to be too short\n\n  canvasRef.current.height = Math.max(min_height, working_height);\n\n  // resetting canvas height messes up font, so set it again\n  ctx.font = font48;\n\n  // if we're using minimum size, sentence margins to center sentence\n  if (min_height > working_height) {\n    top_bottom_sentence_margin = top_bottom_sentence_margin + (min_height - working_height) / 2;\n    working_height = min_height;\n  }\n\n  // background\n  ctx.fillStyle = \"#282c34\";\n  ctx.fillRect(0, 0, cw, canvasRef.current.height);\n\n  // header\n  ctx.font = font36;\n  ctx.fillStyle = \"lightgray\";\n  ctx.fillText(\"details\", 20, (rb - blo));\n  ctx.fillStyle = \"dodgerblue\";\n  let gamesWidth = ctx.measureText(\"games\").width\n  ctx.fillText(\"games\", cw - 20 - gamesWidth, (rb - blo));\n  ctx.fillStyle = \"lightskyblue\";\n  let grumblyWidth = ctx.measureText(\"grumbly\").width\n  ctx.fillText(\"grumbly\", cw - 20 - grumblyWidth - wpr - gamesWidth, (rb - blo));\n\n  // top margin\n  rb += top_bottom_sentence_margin;\n\n  // sentence\n  ctx.font = font48;\n  printSentence(printArray, rb, wpr, blo, cw, ctx);\n  rb += sentence_height;\n\n  // bottom margin\n  rb += top_bottom_sentence_margin;\n\n  // working row\n  ctx.fillStyle = 'whitesmoke';\n  printWorkingRow(cards, margin, rb, cw, working_row_height, workingCards, ctx);\n  rb += working_row_height;\n\n  // between rows\n  rb += margin;\n\n  // card row\n  ctx.lineWidth = 7;\n  printCardRow(cards, margin, rb, cw, card_row_height, font30, ctx);\n  rb += card_row_height;\n\n  // final margin\n  rb += margin;\n\n  // return canvas as dataURL so I can share it ;)\n  return canvasRef.current.toDataURL();\n}\n\n// printing the sentence is complicated because we need to figure\n// out how many words go on each row, what color to make them, \n// set the margins... so we do some pre-printing work\nconst prePrintSentence = (sentence, rm, rh, cw, wpr, margin, ctx) => {\n  // sentence is an array of objects, we're mapping each object\n  // to a different object with a bit of extra information\n  let printArray = sentence.map(word => ({\n    id: word.id,\n    word: word.word,\n    type: word.type,\n    color: typeColor(word.type),\n    width: ctx.measureText(word.word).width + wpr,\n    row: 1,  // default to row 1, will check and update later\n    wordX: 0, // x position\n    wordY: 0, // y position\n  }));\n\n  // horizontal spacing is the next issue\n  // each word has it's own width, plus some space after it,\n  // plus each row has a left and right margin\n  const ww = cw - margin - margin;  // working width\n  let currentRow = 1;\n  let currentRowWidth = 0;\n\n  for (let i = 0; i < printArray.length; i++) {\n    // first check, is there enough room in row for word?\n    // most of the time there is (more words are in one row\n    // than have to wrap to the next), but we need to check\n    // for several situations that require wrapping:\n    // first, is the word too long for the remaining space? wrap!\n    if (((printArray[i].width) >= (ww - currentRowWidth)) ||\n      // or, if not too long, but it is followed by punctuation,\n      // we want the punctuation to stay with it, so is it\n      // too long with the punctuation? wrap!\n      ((i + 1 < printArray.length) && // make sure this isn't last element\n        isPunc(printArray[i + 1].type) && // if so, is next punctuation\n        // if yes, and they both won't fit on this row, then wrap\n        (printArray[i].width + printArray[i + 1].width) > (ww - currentRowWidth))) {\n      currentRow += 1;\n      // if we're here, we wrapped... so we need to put current word\n      // on new line\n      printArray[i].row = currentRow;\n      // we also need to update the working width of the current row\n      currentRowWidth = printArray[i].width + wpr;\n      // if we did wrap because of punctuation, we should add\n      // the punctuation right now \n      if (isPunc(printArray[i + 1].type)) {\n        printArray[i + 1].row = currentRow;\n        currentRowWidth = currentRowWidth + printArray[i + 1].width;\n        // and since i+1 has been dealt with\n        i++;\n      }\n    } else {\n      printArray[i].row = currentRow;\n      currentRowWidth = currentRowWidth + printArray[i].width;\n    }\n  }\n\n  // now we know what row each word goes in, we loop through printArray\n  // again to figure out the x and y position of each word --not \n  // absolute position though, left margin gets added when drawn\n  currentRow = 1;\n  let currentRowOffset = 0;\n  for (let i = 0; i < printArray.length; i++) {\n    printArray[i].wordX = currentRowOffset;\n    currentRowOffset = currentRowOffset + printArray[i].width;\n    printArray[i].wordY = rh * currentRow + rm * (currentRow - 1);\n    // if there is a next element, look ahead and see if we need\n    // to increment the row number / reset row offset\n    if ((i + 1 < printArray.length) && (printArray[i + 1].row !== currentRow)) {\n      currentRow += 1;\n      currentRowOffset = 0;\n    }\n  }\n\n  return printArray;\n}\n\n// function to actually write the sentence\nconst printSentence = (printArray, rb, wpr, blo, cw, ctx) => {\n  // printArray contains the words broken out into rows\n  // with their lengths and colors, but it doesn't have \n  // info about offsets for drawing: offset from top of\n  // canvas for Y, from left for X, and margin adjustments\n  // to center texts\n\n  // calculate width of content in each row\n  let rowWordsWidth = [0];\n  let numRows = printArray[printArray.length - 1].row;\n  for (let i = 1; i <= numRows; i++) {\n    rowWordsWidth.push(printArray.reduce((a, b) => {\n      if (b.row === i) {\n        return a + b.width;\n      } else {\n        return a;\n      }\n    }, 0));\n  }\n\n  // calculate indentation for each row\n  let indent = [0];\n  // except for 1st row, we need to add a left margin \n  // equal to the right margin for balance\n  let extraLeftMargin = wpr;\n  for (let i = 1; i <= numRows; i++) {\n    if (i === 1) {\n      extraLeftMargin = 0;\n    }\n    indent.push((cw - rowWordsWidth[i] + extraLeftMargin) / 2.0);\n  }\n\n  for (let i = 0; i < printArray.length; i++) {\n    ctx.fillStyle = printArray[i].color;\n    ctx.fillText(printArray[i].word,\n      (printArray[i].wordX + indent[printArray[i].row]),\n      (printArray[i].wordY + rb - blo));\n  }\n}\n\nconst printWorkingRow = (cards, margin, rb, cw, working_row_height, workingCards, ctx) => {\n  ctx.fillRect(margin, rb, cw - margin - margin, working_row_height);\n}\n\nconst printCardRow = (cards, margin, rb, cw, card_row_height, font, ctx) => {\n  const cardbuttons = [\"adj\", \"adv\", \"conj\", \"pron\", \"noun\", \"verb\", \"prep\", \"intrj\"];\n  const w = 110; // card width\n  const gap = (cw - margin - margin - 8 * w) / 7;  // between cards\n  const r = 10; // corner radius of button\n  const y = rb;\n  const h = card_row_height;\n  const r1y = y + 40;\n  const r2y = y + 80;\n  let x = margin; // cards are arranged horizontally, this is initial value\n\n  ctx.lineWidth = 5;\n  ctx.textAlign = \"center\";\n\n  cardbuttons.forEach(element => {\n    let fill = false;\n    let cardsByType = cards.filter(kard => (kard.type === element && !kard.working));\n    if (cardsByType.length > 0) {\n      fill = true;\n      ctx.fillStyle = typeColor(element);\n    } else {\n      ctx.strokeStyle = 'gray';\n      ctx.fillStyle = 'gray';\n    }\n\n    roundedRectangle(x, y, w, h, r, ctx, fill);\n\n    ctx.font = font;\n    if (fill) {\n      ctx.fillStyle = 'black';\n    }\n    ctx.fillText(element, (x + w / 2), r1y);\n    ctx.fillText(cardsByType.length, x + w / 2, r2y);\n    x = x + w + gap;\n  });\n}\n\nconst typeColor = (type) => {\n  let color = \"\";\n  switch (true) {\n    case (type === \"conj\"):\n      color = \"yellow\"\n      break;\n    case (type === \"adj\"):\n      color = \"lightskyblue\"\n      break;\n    case (type === \"noun\"):\n      color = \"dodgerblue\"\n      break;\n    case (type === \"adv\"):\n      color = \"pink\"\n      break;\n    case (type === \"verb\"):\n      color = \"#CE3175\"\n      break;\n    case (type === \"intrj\"):\n      color = \"orange\"\n      break;\n    case (type === \"prep\"):\n      color = \"lime\"\n      break;\n    case (type === \"pron\"):\n      color = \"fuchsia\"\n      break;\n    default:\n      color = \"lavender\";\n  }\n\n  return color;\n}\n\nconst roundedRectangle = (x, y, w, h, r, ctx, fill) => {\n  ctx.beginPath();\n  ctx.moveTo(x + w / 2, y);\n  ctx.arcTo(x + w, y, x + w, y + h / 2, r);\n  ctx.arcTo(x + w, y + h, x + w / 2, y + h, r);\n  ctx.arcTo(x, y + h, x, y + h / 2, r);\n  ctx.arcTo(x, y, x + w / 2, y, r);\n  // I don't know why the previous ine doesn't\n  // close the rectangle, so added a final segment\n  ctx.lineTo(x + w / 2, y);\n  if (fill) {\n    ctx.fill();\n  } else {\n    ctx.stroke();\n  }\n  ctx.closePath();\n}\n\n// a bunch of different types of punctuation ;)\n// but they all start \"p_\", so we look for the underscore\nconst isPunc = (type) => {\n  let punc = false;\n  if (type[1] === \"_\") {\n    punc = true;\n  };\n  return punc;\n}\n\nexport default App;","import React from 'react';\nimport './Buttons.css';\nimport Sharing from './Sharing';\n\nconst UndoButton = ({ action, undoable }) => {\n  let optionalClass = \"disabled\";\n  if (undoable) {\n    optionalClass = \"\";\n  }\n  return <button\n    className={optionalClass}\n    onClick={(e) => {\n      e.preventDefault();\n      action();\n    }}>undo\n    </button>;\n}\n\nconst NewGameButton = ({ action }) => {\n  return <button\n    className=\"enabled\"\n    onClick={(e) => {\n      e.preventDefault();\n      action();\n    }}>new game\n    </button>;\n}\n\nconst NewCardButton = ({ action, active }) => {\n  let enabledState = \"\";\n  if (!active) {\n    enabledState = \"disabled\";\n  }\n  return <button\n    className={enabledState}\n    onClick={(e) => {\n      e.preventDefault();\n      action();\n    }}>new card\n    </button>;\n}\n\nconst ShareButton = ({ action }) => {\n  return <button\n    className=\"enabled\"\n    onClick={(e) => {\n      e.preventDefault();\n      action(true);\n    }}>share\n    </button>;\n}\n\nexport default ({ ...props }) => (\n  <div className=\"button_row\">\n    <div className=\"leftbutt\">\n      <NewGameButton action={props.newGame} />\n    </div>\n    <div className=\"rightbutt\">\n      <UndoButton action={props.undo} undoable={props.undoable} />\n      <NewCardButton action={props.newCard} active={props.active} />\n      <ShareButton action={props.setShowSharing} />\n      <Sharing sentence={props.sentence}\n        cards={props.cards}\n        showSharing={props.showSharing}\n        setShowSharing={props.setShowSharing}\n        workingCards={props.workingCards} />\n    </div>\n    <Sharing />\n  </div>\n);","// this function turns the words on the working cards into a properly\n// formatted sentence chunk, which means parsing cards for punctuation,\n// spaces, etc.; \"cards\" is the array of cards, but only the ones in\n// the working row will be processed in order (\"workingCards\" is just\n// an array of card ID numbers)\nexport const preInsertProcessing = (cards, workingCards, maxCardId) => {\n  let toBeInserted = [];\n  let newCardId = maxCardId + 1;\n\n  // \"workingCards\" may have more than one card, so we process them in order\n  workingCards.forEach((element, index) => {\n    let thisCard = getCardById(cards, element);\n    // get word and remove leading/trailing whitespace\n    let werd = thisCard.word.trim();\n    // check if first char is punctuation\n    let punctoo = puncStartCheck(werd);\n    if (punctoo.type !== \"nopunc\") {\n      // if there's punctuation, we have to make a block and insert it\n      toBeInserted.push({\n        id: newCardId++,\n        type: punctoo.type,\n        word: punctoo.content,\n      });\n      // if we did remove punctuation, we must update werd\n      werd = punctoo.newWerd;\n    }\n    // check if word is a noun and if it has an article\n    if (thisCard.type === \"noun\") {\n      let hasArticle = checkForArticle(werd);\n      if (hasArticle) {\n        //let article = getArticle(werd);\n        toBeInserted.push({\n          id: newCardId++,\n          type: \"adj\",\n          word: getArticle(werd),\n        })\n        werd = removeArticle(werd);\n      }\n    }\n    // if werd is a verb check if it has \"to\" or helping verbs\n    if (thisCard.type === \"verb\") {\n      // currently we just break verbs up based on spaces\n      // which, if the verb is correct, should separate out all\n      // the \"to\"s, modals and auxiliary verbs, although we\n      // won't know which is which\n      let splitWerd = werd.split(/\\s+/);\n      if (splitWerd.length > 0) {\n        splitWerd.forEach((subWerd, index) => {\n          // splitWerd should now be an array of all the components\n          // of the verb, which should be any aux verbs then the main verb itself\n          // we need to keep the main verb for the final punc check, but here we\n          // push all the rest into the toBeInserted array\n          if (index !== splitWerd.length - 1) {\n            toBeInserted.push({\n              id: newCardId++,\n              type: \"verb\",\n              word: splitWerd[index],\n            })\n          }\n        })\n        werd = splitWerd[splitWerd.length - 1];\n      }\n      /* // check if \"to\" infinitive\n      if (checkForTo(werd)) {\n        toBeInserted.push({\n          id: uuid.v4(),\n          type: \"verb\",\n          word: \"to\",\n        })\n        werd = werd.slice(2, end).trim();\n      }\n      // remove any modals\n      let modalObj = extractModals(werd);\n      if (modalObj.modal.length > 0) {\n        toBeInserted.push({\n          id: uuid.v4(),\n          type: \"verb\",\n          word: modalObj.modal,\n        })\n        werd = modalObj.restOfVerb;\n      } */\n    }\n    // check if last char is punctuation; if not push werd then a space\n    // char, if yes depunc werd, then push it, then push punctuation\n    punctoo = puncEndCheck(werd);\n    if (punctoo.type === \"nopunc\") {\n      toBeInserted.push({\n        id: newCardId++,\n        type: thisCard.type,\n        word: werd,\n      })\n    } else {\n      toBeInserted.push({\n        id: newCardId++,\n        type: thisCard.type,\n        word: punctoo.newWerd,\n      });\n      toBeInserted.push({\n        id: newCardId++,\n        type: punctoo.type,\n        word: punctoo.content,\n      });\n    }\n  })\n\n  return toBeInserted;\n}\n\nconst getCardById = (cards, cardId) => {\n  let x = cards.filter(x => x.id === cardId);\n  let y = null;\n  if (x.length === 1) {\n    y = x[0];\n  } else {\n    console.log(\"getCardById failed?!\");\n    console.log(x);\n  }\n  return y;\n}\n\n// given a short string (werd) to check if it starts with punctuation\nconst puncStartCheck = (werd) => {\n  let punc = { type: \"\", content: \"\", newWerd: werd };\n  switch (true) {\n    case (werd[0] === \",\"):\n      punc.type = \"p_com\";\n      punc.content = \",\";\n      punc.newWerd = werd.slice(1).trim();\n      break;\n    case (werd[0] === \";\"):\n      punc.type = \"p_semi\";\n      punc.content = \";\";\n      punc.newWerd = werd.slice(1).trim();\n      break;\n    case (werd[0] === \":\"):\n      punc.type = \"p_col\";\n      punc.content = \":\";\n      punc.newWerd = werd.slice(1).trim();\n      break;\n    case (werd[0] === \"(\"):\n      punc.type = \"p_parL\";\n      punc.content = \"(\";\n      punc.newWerd = werd.slice(1).trim();\n      break;\n    default:\n      punc.type = \"nopunc\";\n  }\n\n  return punc;\n}\n\n// given a short string (werd) to check if it ends with punctuation\nconst puncEndCheck = (werd) => {\n  let end = werd.length - 1;\n  let punc = { type: \"\", content: \"\", newWerd: werd };\n  switch (true) {\n    case (werd[end] === \",\"):\n      punc.type = \"p_com\";\n      punc.content = \",\";\n      punc.newWerd = werd.slice(0, end).trim();\n      break;\n    case (werd[end] === \";\"):\n      punc.type = \"p_semi\";\n      punc.content = \";\";\n      punc.newWerd = werd.slice(0, end).trim();\n      break;\n    case (werd[end] === \":\"):\n      punc.type = \"p_cln\";\n      punc.content = \":\";\n      punc.newWerd = werd.slice(0, end).trim();\n      break;\n    case (werd[end] === \"!\"):\n      punc.type = \"p_exc\";\n      punc.content = \"!\";\n      punc.newWerd = werd.slice(0, end).trim();\n      break;\n    case (werd[end] === \".\"):\n      punc.type = \"p_prd\";\n      punc.content = \".\";\n      punc.newWerd = werd.slice(0, end).trim();\n      break;\n    case (werd[end] === \"?\"):\n      punc.type = \"p_qm\";\n      punc.content = \"?\";\n      punc.newWerd = werd.slice(0, end).trim();\n      break;\n    case (werd[end] === \")\"):\n      punc.type = \"p_parR\";\n      punc.content = \")\";\n      punc.newWerd = werd.slice(0, end).trim();\n      break;\n    default:\n      punc.type = \"nopunc\";\n  }\n\n  return punc;\n}\n\n// just a test; articles need to be extracted\nconst checkForArticle = (werd) => {\n  const regex = /^(the |a |an )/i;\n  return regex.test(werd);\n}\n\n// just a test; if a verb is an infintive with \"to\"\nconst checkForTo = (werd) => {\n  const regex = /^(to)/i;\n  return regex.test(werd);\n}\n\n// not currently used\nconst checkForModals = (werd) => {\n  const regex = /^(can |could |will |would |shall |should |might |may |must |have to |ought to |had better |dare need |used to)/i;\n  return regex.test(werd);\n}\n\n// not finished\nconst extractModals = (werd) => {\n  let end = werd.length - 1;\n  let modalObj = { modal: \"\", restOfVerb: \"\", };\n  switch (true) {\n    case (/^can /.test(werd)):\n      modalObj.modal = werd.slice(0, 3).trim();\n      modalObj.restOfVerb = werd.slice(3, end).trim();\n      break;\n    case (/^could /.test(werd)):\n      modalObj.modal = werd.slice(0, 5).trim();\n      modalObj.restOfVerb = werd.slice(5, end).trim();\n      break;\n    case (/^will /.test(werd)):\n      modalObj.modal = werd.slice(0, 4).trim();\n      modalObj.restOfVerb = werd.slice(4, end).trim();\n      break;\n    case (/^would /.test(werd)):\n      modalObj.modal = werd.slice(0, 5).trim();\n      modalObj.restOfVerb = werd.slice(5, end).trim();\n      break;\n    case (/^shall /.test(werd)):\n      modalObj.modal = werd.slice(0, 5).trim();\n      modalObj.restOfVerb = werd.slice(5, end).trim();\n      break;\n    default:\n      ;\n  }\n  return modalObj;\n}\n\n/* const checkForAuxVerbs = (werd) => {\n  const regex = /^(the |a |an )/i;\n  return regex.test(werd);\n} */\n\n// this function will return the article as written,\n// possible capitalization anomalies are not \"fixed\";\n// we also know before this function gets called that\n// werd matches at least one of these patterns, so we only\n// have to test two\nconst getArticle = (werd) => {\n  const theR = /^(the )/i;\n  const anR = /^(an )/i;\n  let article = \"\";\n\n  if (theR.test(werd)) {\n    article = werd.slice(0, 3);\n  } else if (anR.test(werd)) {\n    article = werd.slice(0, 2);\n  } else {\n    article = werd.slice(0, 1);\n  }\n\n  return article;\n}\n\n// this function will return the word without the article;\n// we also know before this function gets called that\n// werd matches at least one of these patterns, so we only\n// have to test two\nconst removeArticle = (werd) => {\n  const theR = /^(the )/i;\n  const anR = /^(an )/i;\n  let bareWord = \"\";\n\n  if (theR.test(werd)) {\n    bareWord = werd.slice(3);\n  } else if (anR.test(werd)) {\n    bareWord = werd.slice(2);\n  } else {\n    bareWord = werd.slice(1);\n  }\n\n  return bareWord.trim();\n}","import React from 'react';\nimport './App.css';\nimport uuid from 'uuid';\nimport DrawHeader from './components/Header';\nimport DrawSentence from './components/SentenceBlocks';\nimport DrawCards from './components/Cards';\nimport DrawButtons from './components/Buttons';\nimport axios from 'axios';\nimport { parseServerResponse } from './nonComponentFunctions/parseServerResponse';\nimport { preInsertProcessing } from './nonComponentFunctions/preInsertProcessing';\n\n\n// the default App\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <DrawHeader />\n      <Game />\n    </div>\n  );\n}\n\n// the default sentence\nconst helloworld = [{\n  sentenceId: uuid.v4(),\n  id: 0,\n  type: 'gameid',\n  word: '',\n},\n{\n  id: 1,\n  type: 'intrj',\n  word: 'Hello',\n},\n{\n  id: 2,\n  type: 'p_com',\n  word: ',',\n},\n{\n  id: 3,\n  type: 'noun',\n  word: 'World',\n},\n{\n  id: 4,\n  type: 'p_exc',\n  word: '!',\n},];\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      active: false,            // game is currently being played\n      placing: false,           // display is showing where a word can be inserted\n      showSharing: false,       // to show the sharing overlay or not\n      sentence: [helloworld],   // our default sentence\n      cards: [],                // all word-types cards player has\n      workingCards: [],         // word-type cards in the working row\n      lastCards: [],            // after a word gets inserted, old card state goes here (for undo)\n      undoable: false,          // if true you can undo the most recent move\n      undoSecondsLeft: 0,       // seconds left before undo turns false again\n      winner: false,            // set when the game is won\n      sentenceUpdateCount: 0,   // to keep track of number of moves\n      totalCardCount: 0,        // to track cards played\n    };\n\n    this.updateSentence = this.updateSentence.bind(this); // adds new sentence to history\n    this.undo = this.undo.bind(this);\n    this.newGame = this.newGame.bind(this);\n    this.newCard = this.newCard.bind(this);\n    this.editCard = this.editCard.bind(this);\n    this.toggleWorking = this.toggleWorking.bind(this);\n    this.clearWR = this.clearWR.bind(this);\n    this.addToWR = this.addToWR.bind(this);\n    this.removeFromWR = this.removeFromWR.bind(this);\n    this.insert = this.insert.bind(this);\n    this.setPlacing = this.setPlacing.bind(this);\n    this.setLastCards = this.setLastCards.bind(this);\n    this.setUndoability = this.setUndoability.bind(this);\n    this.setShowSharing = this.setShowSharing.bind(this);\n  }\n\n  /*   componentDidMount() {\n      const method = \"get\";\n      const url = \"http://localhost:3000/movies\";\n      const config = { headers: { 'Access-Control-Allow-Origin': '*' }};\n      function createCORSRequest(method, url) {\n        var xhr = new XMLHttpRequest();\n        if (\"withCredentials\" in xhr) {\n  \n          // Check if the XMLHttpRequest object has a \"withCredentials\" property.\n          // \"withCredentials\" only exists on XMLHTTPRequest2 objects.\n          xhr.open(method, url, true);\n  \n        } else if (typeof XDomainRequest != \"undefined\") {\n  \n          // Otherwise, check if XDomainRequest.\n          // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n          xhr = new XDomainRequest();\n          xhr.open(method, url);\n  \n        } else {\n  \n          // Otherwise, CORS is not supported by the browser.\n          xhr = null;\n  \n        }\n        return xhr;\n      }\n  \n      var xhr = createCORSRequest('GET', url);\n      if (!xhr) {\n        throw new Error('CORS not supported');\n      }\n    } */\n\n  updateSentence(longerSentence) {\n    var x = this.state.sentence;\n    x.push(longerSentence);\n    this.setState({ sentence: x });\n  }\n\n  // after placing a words in the sentence, the user has 7 seconds to\n  // change their mind; after this the user is given a new card;\n  // this function just handles the \"undo\" part\n  undo() {\n    var x = this.state.sentence;\n    x.pop();\n    this.setState({ sentence: x, cards: this.state.lastCards, undoable: false });\n  }\n\n  newGame() {\n    // TODO:\n    // alert\n    // ask if they're sure\n    // if they click yes, ask server for new game\n    // for now, just choose new sentence from file\n    // ask server for new sentence... wait\n    // if sentence arrives\n    let serverResponse = \"\";\n    // movies/70025897-ce45-4024-a6ec-94e94b278516\n    axios.get('http://localhost:3000/', {\n      headers: {\n        'Content-Type': 'text/plain',\n      }\n    })\n      .then(response => {\n        serverResponse = response.data;\n        if (true) {\n          let newSentence = parseServerResponse(serverResponse);\n          console.log(newSentence)\n          this.setState({\n            sentence: [newSentence.sentence],\n          });\n          this.setPlacing(false);\n          this.clearWR();\n          // sometimes the game coming from server has cards, sometimes not\n          if (newSentence.cards.length > 0) {\n            this.setState({ cards: newSentence.cards })\n          } else {\n            let x = [];\n            // for now, every new game starts with five cards\n            for (var i = 0; i < 5; i++) {\n              x.push(newRandomCard(i));\n            }\n            this.setState({ cards: x, totalCardCount: 5, });\n          }\n          this.setState({ lastCards: [], active: true, winner: false, sentenceUpdateCount: 0 });\n        } else {\n          console.log(\"no data in response?\");\n          console.log(serverResponse);\n        }\n      })\n      .catch(err => console.log(err));\n  }\n\n  newCard() {\n    this.setState({\n      cards: this.state.cards.concat([newRandomCard(this.state.totalCardCount)]),\n      totalCardCount: this.state.totalCardCount + 1,\n    });\n  }\n\n  editCard(cardId, value) {\n    let x = this.state.cards;\n    const indexOfCard = x.findIndex(element => element.id === cardId);\n    x[indexOfCard].word = value;\n    this.setState({ cards: x });\n  }\n\n  toggleWorking(cardId) {\n    let updatedCards = this.state.cards.slice();\n    let cardIndex = updatedCards.findIndex(element => element.id === cardId);\n    updatedCards[cardIndex].working = !updatedCards[cardIndex].working;\n    this.setState({ cards: updatedCards });\n  }\n\n  clearWR() {\n    this.setState({ workingCards: [] });\n    this.setPlacing(false);\n  }\n\n  addToWR(cardId) {\n    this.setState({ workingCards: this.state.workingCards.concat([cardId]) });\n  }\n\n  removeFromWR(cardId) {\n    this.setState({ workingCards: this.state.workingCards.filter(x => x !== cardId) });\n    let anythingToPlace = false;\n    this.state.cards.forEach(x => { if (x.word.length > 0) { anythingToPlace = true } });\n    this.setPlacing(this.state.placing && anythingToPlace);\n  }\n\n  insert(index) {\n    // deciding how to format the working row is complicated, so logic moved to its own file\n    const maxCardId = this.state.sentence[this.state.sentence.length - 1].reduce((max, x) => (x.id > max ? x.id : max), 0);\n    let toBeInserted = preInsertProcessing(this.state.cards, this.state.workingCards, maxCardId);\n    let newSentenceHead = this.state.sentence[this.state.sentence.length - 1].slice(0, index + 1);\n    let newSentenceTail = this.state.sentence[this.state.sentence.length - 1].slice(index + 1);\n    let newSentence = newSentenceHead.concat(toBeInserted).concat(newSentenceTail);\n    this.updateSentence(newSentence);\n    // some clean up needs to be done after words have been inserted into the sentence\n    // make a clean (no content) copy of cards in case we need to undo\n    this.setLastCards();\n    // note: some events (checking for a winner, scoring, adding a new card) are triggered in setUndoability\n    this.setUndoability();\n    // filter to find cards (by id) that have not been placed into sentence\n    this.setState({ cards: this.state.cards.filter(x => this.state.workingCards.findIndex(y => y === x.id) === -1) });\n    this.clearWR();\n  }\n\n  setUndoability() {\n    this.setState({ undoable: true, undoSecondsLeft: 7, });\n    const interval = setInterval(() => {\n      if (this.state.undoable && this.state.undoSecondsLeft > 0) {\n        this.setState({ undoSecondsLeft: this.state.undoSecondsLeft - 1 });\n      } else if (this.state.undoable && this.state.undoSecondsLeft === 0) {\n        this.setState({ undoable: false });\n        clearInterval(interval);\n        this.setState({ sentenceUpdateCount: this.state.sentenceUpdateCount + 1 })\n        // check if we won the game, if not new card\n        if (this.state.cards.length === 0) {\n          this.setState({ winner: true, active: false, });\n        } else {\n          this.newCard();\n        }\n      } else {\n        this.setState({ undoSecondsLeft: 0 });\n        clearInterval(interval);\n      }\n    }, 1000);\n  }\n\n  setShowSharing(value) {\n    this.setState({ showSharing: value });\n  }\n\n  setPlacing(value) {\n    this.setState({ placing: value });\n  }\n\n  // makes a copy of the state of cards but with no content/no working row\n  setLastCards() {\n    this.setState({\n      lastCards: this.state.cards.map(card => (\n        {\n          id: card.id,\n          type: card.type,\n          working: false,\n          word: '',\n        })\n      )\n    });\n  }\n\n  render() {\n    return <div className=\"Game\">\n      <DrawButtons\n        undo={this.undo}\n        cards={this.state.cards}\n        sentence={this.state.sentence[this.state.sentence.length - 1]}\n        newGame={this.newGame}\n        newCard={this.newCard}\n        showSharing={this.state.showSharing}\n        setShowSharing={this.setShowSharing}\n        active={this.state.active}\n        undoable={this.state.undoable}\n        workingCards={this.state.workingCards}\n      />\n      <DrawSentence sentence={this.state.sentence[this.state.sentence.length - 1]}\n        placing={this.state.placing}\n        insert={this.insert}\n      />\n      <DrawCards\n        cards={this.state.cards}\n        onEdit={this.editCard}\n        active={this.state.active}\n        wR={this.state.workingCards}\n        toggleWorking={this.toggleWorking}\n        clearWR={this.clearWR}\n        addToWR={this.addToWR}\n        removeFromWR={this.removeFromWR}\n        setPlacing={this.setPlacing}\n        placing={this.state.placing}\n        undoable={this.state.undoable}\n        undoSecondsLeft={this.state.undoSecondsLeft}\n        winner={this.state.winner}\n        totalCardCount={this.state.totalCardCount}\n        sentenceUpdateCount={this.state.sentenceUpdateCount}\n      />\n    </div>\n  }\n}\n\nconst newRandomCard = (newCardId) => {\n  const rando = Math.floor(Math.random() * 1000);\n  let type = null;\n  switch (true) {\n    case (rando < 280): type = \"noun\"; break;\n    case (rando < 460): type = \"verb\"; break;\n    case (rando < 530): type = \"adj\"; break;\n    case (rando < 580): type = \"adv\"; break;\n    case (rando < 670): type = \"pron\"; break;\n    case (rando < 790): type = \"prep\"; break;\n    case (rando < 980): type = \"conj\"; break;\n    default: type = \"intrj\";\n  }\n  return {\n    id: newCardId,\n    type: type,\n    working: false,\n    word: '',\n  }\n}\n\n\nexport default App;\n","import sampleSentence from \"../data/sampleSentence.json\";\n\nexport const parseServerResponse = (someJsonSentence) => {\n  let mySentence = sampleSentence;\n\n  /* let ngs = {\n    active: true,                // game is currently not being played\n    sentence: [mySentence[1]],    // the above sentence\n    cards: mySentence[0][0].cards,   // in some cases, a game may come with cards\n    snum: mySentence[0][0].snum,     // sentence number\n  }; */\n  let ngs = mySentence;\n  console.log(ngs);\n  return ngs;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}